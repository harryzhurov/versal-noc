#-------------------------------------------------------------------------------
#
#    Variant construction script
#
#    Author: Harry E. Zhurov
#
#-------------------------------------------------------------------------------

import os
import sys

#-------------------------------------------------------------------------------
#
#    Configuration
#
cfg  = import_config('main.yml')
env  = import_config('env.yml')
dirs = import_config('dirpath.yml')

sys.path.append(dirs.SCRIPT)

#-------------------------------------------------------------------------------
#
#    Sources
#
src_syn        = read_sources('src_syn.yml')
src_sim        = read_sources('src_sim.yml')
ip             = read_sources('ip.yml')
bd             = read_sources('bd.yml')
xdc            = read_sources('xdc.yml')
xpr_hooks      = read_sources('xpr_hook.yml')

syn_deps       = src_syn + xdc
hdl_param_deps = 'main.yml clk.yml params.yml ila.yml'
xpr_deps       = 'src_syn.yml src_sim.yml xdc.yml'.split() + bd + xpr_hooks

ila_settings   = os.path.join(dirs.CFG, 'script', 'ila.tcl') 
prj_impl_deps  = [ila_settings]
#-------------------------------------------------------------------------------
#
#    Environment
#
Import('envx')

envx.Tool('vivado')
envx.Tool('questa')

envx['VIVADO_PROJECT_NAME'] = cfg.PROJECT_NAME
envx['TOP_NAME']            = cfg.TOP_NAME
envx['TESTBENCH_NAME']      = cfg.TESTBENCH_NAME
envx['DEVICE']              = cfg.DEVICE

# path
envx['SETTINGS_SEARCH_PATH'] = [dirs.SETTINGS]                               # dir for settings files (typically *.yml)
envx['INC_PATH']             = [envx['BUILD_SRC_PATH']] + get_dirs(src_syn) + [dirs.LIB]
envx['SIM_INC_PATH']         = envx['INC_PATH']
#envx['BD_SIM_PATH']          = dirs.BD_SIM

envx.Append(VLOG_FLAGS = ' -O5 -timescale=1ns/1ps')
envx.Append(VOPT_FLAGS = ' -O5 -L wlib -L unifast_ver -L unisims_ver -L unimacro_ver -L secureip -L xpmlib')
envx.Append(VOPT_FILTER_RULES = '\*\* Warning.+\.gen\/sources_1\/bd.+\:\s\(vopt-2718\)')
envx.Append(VOPT_FILTER_RULES = '\*\* Warning.+\.gen\/sources_1\/bd.+\:\s\(vopt-2697\)')
envx.Append(VOPT_FILTER_RULES = '\*\* Warning.+\.gen\/sources_1\/bd.+\:\s\(vopt-2685\)')
envx.Append(VOPT_FILTER_RULES = '\*\* Warning.+\.gen\/sources_1\/bd.+\:\s\(vopt-2250\)')
envx.Append(VOPT_FILTER_RULES = '\*\* Warning.+\(vopt-10017\) vopt and vlog detected inconsistent ordering of options')
envx.Append(VOPT_FILTER_RULES = '\*\* Warning.+\(vopt-13361\) .+xilinx_vip.+No trigger event')

# user-defined parameters
envx.Append(USER_DEFINED_PARAMS = {'ROOT_DIR'      : envx['ROOT_PATH']})
envx.Append(USER_DEFINED_PARAMS = {'CFG_DIR'       : envx['CFG_PATH']})
envx.Append(USER_DEFINED_PARAMS = {'BUILD_SRC_DIR' : envx['BUILD_SRC_PATH']})

envx['PROJECT_CREATE_FLAGS'] = '-f'
envx['BITSTREAM_SUFFIX']     = 'pdi'

#-------------------------------------------------------------------------------
#
#    Targets
#

cfg_params_header = os.path.join(envx['BUILD_SRC_PATH'], 'cfg_params.svh')
env_tcl           = os.path.join(envx['BUILD_SRC_PATH'], 'env.tcl')
cfg_params_tcl    = os.path.join(envx['BUILD_SRC_PATH'], 'cfg_params.tcl')
impl_env_tcl      = os.path.join(envx['BUILD_SRC_PATH'], 'impl_env.tcl')

prj_impl_deps.append(impl_env_tcl)

#   scripts
IP_Create_Scripts  = envx.IpCreateScripts(ip)
IP_Syn_Scripts     = envx.IpSynScripts(ip)
IP_Cores           = envx.CreateIps(IP_Create_Scripts)
IP_OOC_Syn         = envx.SynIps(IP_Syn_Scripts, IP_Cores)
                   
#   generated sources
CfgParamsHeader    = envx.CreateCfgParamsHeader(cfg_params_header, hdl_param_deps)
EnvTcl             = envx.CreateCfgParamsTcl(env_tcl, 'env.yml dirpath.yml')
CfgParamsTcl       = envx.CreateCfgParamsTcl(cfg_params_tcl, 'main.yml params.yml clk.yml ila.yml')
ImplEnvTcl         = envx.CreateCfgParamsTcl(impl_env_tcl, 'main.yml clk.yml dirpath.yml ila.yml')
                   
#   main targets
WLib               = envx.CompileWorkLib(src_syn + src_sim)
VivadoProject      = envx.CreateVivadoProject(xpr_deps , IP_Cores)
SynthVivadoProject = envx.LaunchSynthVivadoProject(VivadoProject, syn_deps)
ImplVivadoProject  = envx.LaunchImplVivadoProject(SynthVivadoProject)

#   sim libs
SimLib              = envx.CompileSimLib([IP_Cores, VivadoProject])

#   launch tools
LaunchQuestaGui    = envx.LaunchQuestaGui()
LaunchQuestaRun    = envx.LaunchQuestaRun()
OpenVivadoProject  = envx.LaunchOpenVivadoProject(VivadoProject)

#   explicit dependencies and directives
Depends(WLib,               [SimLib, CfgParamsHeader, VivadoProject])
Depends(LaunchQuestaRun,    WLib)
Depends(VivadoProject,      [EnvTcl, CfgParamsHeader, CfgParamsTcl, ImplEnvTcl])
Depends(SynthVivadoProject, [CfgParamsHeader])
Depends(ImplVivadoProject,  prj_impl_deps)
Depends(OpenVivadoProject,  [IP_OOC_Syn, CfgParamsHeader])

if 'prjsyn' in COMMAND_LINE_TARGETS or 'prjsyn' in COMMAND_LINE_TARGETS or 'prjimpl' in COMMAND_LINE_TARGETS: 
    Requires(VivadoProject, IP_OOC_Syn) 

envx.AlwaysBuild(WLib)
envx.AlwaysBuild(LaunchQuestaGui)

Default(WLib)
all = [WLib, ImplVivadoProject]

#-------------------------------------------------------------------------------
#
#    Target Aliases
#
envx.Alias('ipcs',       IP_Create_Scripts)
envx.Alias('ipss',       IP_Syn_Scripts)
envx.Alias('ip_cores',   IP_Cores)
envx.Alias('ip_ooc',     IP_OOC_Syn)
                         
#envx.Alias('ip_sls',     IP_SimLib_Scripts)
envx.Alias('simlib',     SimLib)
#envx.Alias('bdsimlib',   BD_SimLib)
envx.Alias('cparam',     CfgParamsHeader)
envx.Alias('cparam-tcl', CfgParamsTcl)
envx.Alias('wlib',       WLib)
envx.Alias('qs_gui',     LaunchQuestaGui)
envx.Alias('qs_run',     LaunchQuestaRun)

envx.Alias('prj',        VivadoProject)
envx.Alias('prjsyn',     SynthVivadoProject)
envx.Alias('prjimpl',    ImplVivadoProject)
envx.Alias('prjopen',    OpenVivadoProject)

envx.Alias('all',        all)

#-------------------------------------------------------------------------------
#
#    Info
#
Help("""
    Variant '%s' available targets:
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ipcs       : IP Create Scripts
        ipss       : IP Synthesize Scripts
        ip_cores   : Create IPs
        ip_ooc     : Create IP design checkpoints by sythisizing of 'xci's

        ip_sls     : IP SimLib Scripts
        simlib     : IP SimLib
        bdsimlib   : BD SimLib
        cparam     : generate parameter headers
        cparam-tcl : generate parameters list Tcl scripts
        wlib       : compile work library (default)
        qs_gui     : launch Questa GUI in destination dir with tool script loaded
        qs_run     : launch simulation run in non-GUI mode

        prj        : create Vivado Project
        prjsyn     : synthesize Vivado Project
        prjimpl    : implement Vivado Project
        prjopen    : open Vivado Project in GUI mode

        all        : build wlib and prjimpl targets
********************************************************************************     
""" % os.getcwd().split(os.sep)[-1])

#-------------------------------------------------------------------------------
#
#  Extensions
#

#---------------------------------------------------------------------
#    Logs

#-------------------------------------------------
def show_syn_log(target, source, env):
    log    = os.path.join(env['BUILD_SYN_PATH'], env['VIVADO_PROJECT_NAME'] + '.runs', 'synth_1', 'runme.log')
    logmon = os.path.join(dirs.SCRIPT, 'syn_lmon.sh')

    cmd = 'gnome-terminal -t Vivado Synthesis  -- zsh -c "' + logmon + ' ' + log + '"'
    os.system(cmd)
#-------------------------------------------------
def show_impl_log(target, source, env):
    log    = os.path.join(env['BUILD_SYN_PATH'], env['VIVADO_PROJECT_NAME'] + '.runs', 'impl_1', 'runme.log')
    logmon = os.path.join(dirs.SCRIPT, 'impl_lmon.sh')

    cmd = 'gnome-terminal -t Vivado Implementation  -- zsh -c "' + logmon + ' ' + log + '"'
    os.system(cmd)
#-------------------------------------------------


if 'VIVADO_LOG_MONITOR_ENABLE' in os.environ:
    envx.AddPreAction(SynthVivadoProject, show_syn_log)
    envx.AddPreAction(ImplVivadoProject, show_impl_log)


#---------------------------------------------------------------------
#    Reports

from tabulate import tabulate
import vivado_report as vrpt

warn_opt_str = ARGUMENTS.get('warn', '')
warn_opt     = warn_opt_str.split()

def warning_summary(target, source, env):
    vrpt.warning_report(env, 'syn')

def show_reports(target, source, env):
    vrpt.utilization_report(env)
    vrpt.timing_report(env)
    vrpt.warning_report(env, warn_opt)


Rpt = envx.Command(['reports'], [], show_reports)

envx.Alias('rpt', Rpt)
envx.AddPostAction(SynthVivadoProject, warning_summary)
envx.AddPostAction(ImplVivadoProject,  show_reports)

Help("""
    Report control
    ~~~~~~~~~~~~~~

    scons -s rpt            : display utilization, timing and warning summary info
    scosn -s rpt warn=<arg> : can be 'syn', 'impl', 'all'. 
                              Display corresponding warnings
""")
#-------------------------------------------------------------------------------

